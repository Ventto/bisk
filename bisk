#!/bin/sh

hasbin()
{
    command -vp "$1" >/dev/null 2>&1 && return 0
    printf "%s: command is required"  "$1"
    exit 1
}

set -e
hasbin sgdisk
hasbin id
hasbin lsdblk
hasbin basename
hasbin dirname
hasbin cut
hasbin printf
set +e

usage()
{
    desc="Arguments:
  device       block device path, ex: /dev/sda
  directory    all the backup files are stored into the given directory "
    printf "Usage: %s device directory\n\n%s\n" "$(basename "$0")" "$desc"
}

checkargs()
{
    [ "$#" -ne 2 ] && return 1

    if [ ! -b "$1" ]; then
        printf "%s: block device not found or read-protected\n"  "$1"
        return 1
    fi

    if [ ! -d "$2" ]; then
        printf "%s: directory not found or read-protected\n"  "$2"
        return 1
    fi
}

save_gpt()
{
    _dev="$1"
    _dirout="$2"

    bkp_file="${_dirout}/$(basename "$_dev")_gpt.pcl"

    out="$(sgdisk -b "$bkp_file" "$_dev" 2>&1)"

    if [ "$?" -ne 0 ]; then
        echo "save_gpt: failed"
        echo "$out"
        exit 1
    fi

    echo "save_gpt: ok"
}

save_mbr()
{
    _dev="$1"
    _dirout="$2"

    bkp_file="${_dirout}/$(basename "$_dev")_mbr.img"

    out="$(dd if="$_dev" of="$bkp_file" bs=512 count=1 2>&1)"

    if [ "$?" -ne 0 ]; then
        echo "save_mbr: failed"
        echo "$out"
        exit 1
    fi

    echo "save_mbr: ok"
}

save_blk()
{
    _blk="$1"
    _dirout="$2"

    blk_path="$(echo "$_blk" | cut -d' ' -f1)"
    blk_fstype="$(echo "$_blk" | cut -d' ' -f2)"
    blk_name="$(basename "$blk_path")"

    partclone_opt="-c"
    [ -z "$blk_fstype" ] && { blk_fstype="dd"; partclone_opt=; }

    partclone."${blk_fstype}" $partclone_opt -d -s "${blk_path}" -N \
        | gzip -2 > "${_dirout}/${blk_name}.gz"
}

save_partitions()
{
    _dev="$1"
    _dirout="$2"

    data_blks="$(lsdblk "$_dev")"

    if [ -z "$data_blks" ]; then
        echo "No partition detected"
        exit 0
    fi


    echo "$data_blks" | while read -r blk; do
        # If we fail to clone a block we try with the next one
        if ! save_blk "$blk" "$_dirout"; then
            echo "save_blk ${blk}: failed"
            continue
        fi
        echo "save_blk ${blk}: ok"
    done
}

main()
{
    checkargs "$@" || { usage; exit 2; }

    if [ "$(id -u)" -ne 0 ]; then
        echo "sudo required"
        exit 1
    fi

    save_mbr "$@"
    save_gpt "$@"
    save_partitions "$@"
}

main "$@"
