#!/bin/bash

set -euf

hasbin()
{
    command -vp "$1" >/dev/null 2>&1 && return 0
    printf "%s: command is required"  "$1"
    exit 1
}

hasbin sgdisk
hasbin id
hasbin lsdblk
hasbin basename
hasbin dirname
hasbin cut
hasbin printf
hasbin partclone.dd

usage()
{
    desc="Arguments:
  device       block device path, ex: /dev/sda
  directory    all the backup files are stored into the given directory "
    printf "Usage: %s device directory\n\n%s\n" "$(basename "$0")" "$desc"
}

checkargs()
{
    [ "$#" -ne 2 ] && return 1

    if [ ! -b "$1" ]; then
        printf "%s: block device not found or read-protected\n"  "$1"
        return 1
    fi

    if [ ! -d "$2" ]; then
        printf "%s: directory not found or read-protected\n"  "$2"
        return 1
    fi
}

save_gpt()
{
    _dev="$1"
    _dirout="$2"

    bkp_file="${_dirout}/$(basename "$_dev")_gpt.pcl"

    out="$(sgdisk -b "$bkp_file" "$_dev" 2>&1)"

    if [ "$?" -ne 0 ]; then
        echo "save_gpt: failed"
        echo "$out"
        exit 1
    fi

    echo "save_gpt: ok"
}

save_mbr()
{
    _dev="$1"
    _dirout="$2"

    bkp_file="${_dirout}/$(basename "$_dev")_mbr.img"

    out="$(dd if="$_dev" of="$bkp_file" bs=512 count=1 2>&1)"

    if [ "$?" -ne 0 ]; then
        echo "save_mbr: failed"
        echo "$out"
        exit 1
    fi

    echo "save_mbr: ok"
}

save_blk()
{
    _blk_path="$1"
    _blk_fstype="$2"
    _dirout="$3"
    _logfile="$4"

    blk_name="$(basename "$_blk_path")"

    partclone_opt="-c"
    partclone_fstype="$_blk_fstype"
    [ -z "$_blk_fstype" ] && { partclone_fstype="dd"; partclone_opt=; }

	if ! command -vp "partclone.${partclone_fstype}" >/dev/null 2>&1; then
		echo "${_blk_fstype}: partclone does not handle this fstype"
		return 1
	fi

    set -o pipefail
    partclone."${partclone_fstype}" \
            $partclone_opt -d3 -N \
            -s "${_blk_path}" \
            --logfile "${_logfile}" \
        | gzip -2 > "${_dirout}/${blk_name}.gz"
    ret="$?"
    set +o pipefail
    return "$ret"
}

save_partitions()
{
    _dev="$1"
    _dirout="$2"

    log_dir="${_dirout}/logs"
    data_blks="$(lsdblk "$_dev")"

    if [ -z "$data_blks" ]; then
        echo "No partition detected"
        exit 0
    fi

    mkdir -p "$log_dir"

    echo "$data_blks" | while read -r blk; do
        blk_path="$(echo "$blk" | cut -d' ' -f1)"
        blk_name="$(basename "$blk_path")"
        blk_fstype="$(echo "$blk" | cut -d' ' -f2)"
        [ "$blk_fstype" = "$blk_path" ] && blk_fstype=
        logfile="${_dirout}/logs/${blk_name}-partclone.log"

        # If we fail to clone a block we try with the next one
        if ! save_blk "$blk_path" "$blk_fstype" "$_dirout" "$logfile" ; then
            echo "save_blk '${blk}': failed, log=${logfile}"
            continue
        fi
        echo "save_blk '${blk}': ok"
    done
}

main()
{
    checkargs "$@" || { usage; exit 2; }

    if [ "$(id -u)" -ne 0 ]; then
        echo "sudo required"
        exit 1
    fi

    save_mbr "$@"
    save_gpt "$@"
    save_partitions "$@"
}

main "$@"
